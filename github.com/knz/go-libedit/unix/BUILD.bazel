load("@io_bazel_rules_go//go:def.bzl", "go_library")
load("@rules_foreign_cc//tools/build_defs:configure.bzl", "configure_make")

cc_library(
    name = "libedit_unix_cdeps",
    srcs = select({
        "@io_bazel_rules_go//go/platform:android": glob([
            "src/*.c",
            "src/*.h",
        ]),
        "@io_bazel_rules_go//go/platform:linux": glob([
            "src/*.c",
            "src/*.h",
        ]),
        "//conditions:default": glob([
            "shim/**/*.c",
            "shim/**/*.h",
        ]),
    }),
    hdrs = select({
        "@io_bazel_rules_go//go/platform:android": glob([
            "src/*.h",
            "src/*.c",
        ]),
        "@io_bazel_rules_go//go/platform:linux": glob([
            "src/*.h",
            "src/*.c",
        ]),
        "//conditions:default": glob([
            "shim/**/*.h",
            "shim/**/*.c",
        ]),
    }),
    copts = ["-DGO_LIBEDIT_NO_BUILD"],
    deps = select({
        "@io_bazel_rules_go//go/platform:android": [
            "//unix/src/c-libedit:c-libedit",
        ],
        "@io_bazel_rules_go//go/platform:linux": [
            "//unix/src/c-libedit:c-libedit",
        ],
        "//conditions:default": [],
    }),
)

configure_make(
    name = "libedit",
    autoconf = True,
    configure_env_vars = {
        "AR": "/usr/bin/ar",  # XXX: What happens if this is left empty?
    },
    configure_in_place = True,
    configure_options = [
        "--disable-examples",
        "--disable-shared",
    ],
    lib_source = "@libedit//:all",
    static_libraries = ["libedit.a"],
    visibility = ["//visibility:public"],
)

go_library(
    name = "unix",
    srcs = [
        "c_editline.c",
        "c_editline.h",
        "editline_unix.go",
        "stub_find_word_to_complete.h",
        "stub_fn_complete.h",
        "wrap-chared.c",
        "wrap-chartype.c",
        "wrap-common.c",
        "wrap-el.c",
        "wrap-eln.c",
        "wrap-emacs.c",
        "wrap-filecomplete.c",
        "wrap-hist.c",
        "wrap-history.c",
        "wrap-historyn.c",
        "wrap-keymacro.c",
        "wrap-map.c",
        "wrap-parse.c",
        "wrap-prompt.c",
        "wrap-read.c",
        "wrap-readline.c",
        "wrap-refresh.c",
        "wrap-search.c",
        "wrap-sig.c",
        "wrap-strlcat.c",
        "wrap-strlcpy.c",
        "wrap-terminal.c",
        "wrap-tokenizer.c",
        "wrap-tokenizern.c",
        "wrap-tty.c",
        "wrap-unvis.c",
        "wrap-vi.c",
        "wrap-vis.c",
        "wrap-wcsdup.c",
    ],
    cdeps = [
        ":libedit_unix_cdeps",
    ],
    cgo = True,
    clinkopts = select({
        "@io_bazel_rules_go//go/platform:android": [
            "-lncurses",
        ],
        "@io_bazel_rules_go//go/platform:darwin": [
            "-ledit",
        ],
        "@io_bazel_rules_go//go/platform:dragonfly": [
            "-ledit",
        ],
        "@io_bazel_rules_go//go/platform:freebsd": [
            "-ledit",
        ],
        "@io_bazel_rules_go//go/platform:ios": [
            "-ledit",
        ],
        "@io_bazel_rules_go//go/platform:linux": [
            "-lncurses",
        ],
        "@io_bazel_rules_go//go/platform:netbsd": [
            "-ledit",
        ],
        "@io_bazel_rules_go//go/platform:openbsd": [
            "-ledit",
        ],
        "//conditions:default": [],
    }),
    copts = select({
        "@io_bazel_rules_go//go/platform:android": [
            "-Wno-unused-result -Wno-pointer-sign",
        ],
        "@io_bazel_rules_go//go/platform:linux": [
            "-Wno-unused-result -Wno-pointer-sign",
        ],
        "//conditions:default": [],
    }),
    cppopts = select({
        "@io_bazel_rules_go//go/platform:android": [
            "-Ivendor/github.com/knz/go-libedit/unix/src -Ivendor/github.com/knz/go-libedit/unix/src/c-libedit -Ivendor/github.com/knz/go-libedit/unix/src/c-libedit/editline -Ivendor/github.com/knz/go-libedit/unix/src/c-libedit/linux-build -D_GNU_SOURCE",
        ],
        "@io_bazel_rules_go//go/platform:darwin": [
            "-Ivendor/github.com/knz/go-libedit/unix/shim",
        ],
        "@io_bazel_rules_go//go/platform:dragonfly": [
            "-Ivendor/github.com/knz/go-libedit/unix/shim",
        ],
        "@io_bazel_rules_go//go/platform:freebsd": [
            "-Ivendor/github.com/knz/go-libedit/unix/shim",
        ],
        "@io_bazel_rules_go//go/platform:ios": [
            "-Ivendor/github.com/knz/go-libedit/unix/shim",
        ],
        "@io_bazel_rules_go//go/platform:linux": [
            "-Ivendor/github.com/knz/go-libedit/unix/src -Ivendor/github.com/knz/go-libedit/unix/src/c-libedit -Ivendor/github.com/knz/go-libedit/unix/src/c-libedit/editline -Ivendor/github.com/knz/go-libedit/unix/src/c-libedit/linux-build -D_GNU_SOURCE",
        ],
        "@io_bazel_rules_go//go/platform:netbsd": [
            "-Ivendor/github.com/knz/go-libedit/unix/shim",
        ],
        "@io_bazel_rules_go//go/platform:openbsd": [
            "-Ivendor/github.com/knz/go-libedit/unix/shim",
        ],
        "//conditions:default": [],
    }),
    importmap = "github.com/cockroachdb/cockroach/vendor/github.com/knz/go-libedit/unix",
    importpath = "github.com/knz/go-libedit/unix",
    visibility = ["//visibility:public"],
    deps = ["//vendor/github.com/knz/go-libedit/common"],
)
